<?xml version="1.0"?>
<robot xmlns:xacro="http://wiki.ros.org/xacro" name="$(arg name)">
   <!-- robot name parameter -->
   <xacro:arg name="name" default="ur"/>
   <!-- include arm -->
   <xacro:include filename="$(find ur_description)/urdf/ur_macro.xacro"/>
   <!-- include ros2 control -->
   <xacro:include filename="$(find ur_description)/urdf/ur.ros2_control.xacro" />

   <xacro:arg name="ur_type" default="ur5x"/>

   <xacro:arg name="prefix" default="" />

   <xacro:arg name="joint_limit_params" default="$(find ur_description)/config/$(arg ur_type)/joint_limits.yaml"/>
   <xacro:arg name="kinematics_params" default="$(find ur_description)/config/$(arg ur_type)/default_kinematics.yaml"/>
   <xacro:arg name="physical_params" default="$(find ur_description)/config/$(arg ur_type)/physical_parameters.yaml"/>
   <xacro:arg name="visual_params" default="$(find ur_description)/config/$(arg ur_type)/visual_parameters.yaml"/>
   <xacro:arg name="joint_dynamics_params" default="$(find ur_description)/config/$(arg ur_type)/joint_dynamics_parameters.yaml"/>
   <xacro:arg name="transmission_hw_interface" default=""/>
   <xacro:arg name="safety_limits" default="false"/>
   <xacro:arg name="safety_pos_margin" default="0.15"/>
   <xacro:arg name="safety_k_position" default="20"/>
   <xacro:arg name="simulation_controllers" default="" />
   
   <!-- Initial positions for simulation -->
   <xacro:arg name="initial_positions_file" default="$(find ur_simulation_gazebo)/config/home_positions.yaml"/>

   <!-- convert to property to use substitution in function -->
   <xacro:property name="initial_positions_file" default="$(arg initial_positions_file)"/>

   <!-- create link fixed to the "world" -->
   <link name="world"/>

   <xacro:read_model_data
     joint_limits_parameters_file="$(arg joint_limit_params)"
     kinematics_parameters_file="$(arg kinematics_params)"
     physical_parameters_file="$(arg physical_params)"
     visual_parameters_file="$(arg visual_params)"
     joint_dynamics_parameters_file="$(arg joint_dynamics_params)"
     force_abs_paths="false"/>
   
   <!-- 
      Joint dynamics damping and friction default to zero (from ur_description/config files)
      To address #19, we could define the joint dynamics in a config file, 
      but it does seem good to use some multiple of the effort limit
      the effort limits are loaded by read_model_data
   -->

   <!-- arm instance -->
   <xacro:ur_robot
     name="$(arg name)"
     prefix="$(arg prefix)"
     parent="world"
     safety_limits="$(arg safety_limits)"
     safety_pos_margin="$(arg safety_pos_margin)"
     safety_k_position="$(arg safety_k_position)"
     >
     <origin xyz="0 0 0.05" rpy="0 0 0" />          <!-- position robot in the world, a little elevated to avoid base contact-->
   </xacro:ur_robot>

   <!-- ros2 control, if needed -->
   <xacro:ur_ros2_control
      name="$(arg name)" prefix="$(arg prefix)"
      add_non_joint_interfaces="false"
      initial_positions="${xacro.load_yaml(initial_positions_file)}"
      >
      <!-- You could actually add custom non-joint state and command interfaces here too, don't know how to flag that-->
      <ros2_control_hardware>
         <hardware>
            <plugin>gazebo_ros2_control/GazeboSystem</plugin>
         </hardware>
         <!-- Are there sensor plugins to define here as well? TODO: look into it -->
      </ros2_control_hardware>
   </xacro:ur_ros2_control>

   <!-- now gazebo tags can just be in the gazebo package. No switching needed in ur_description -->
   <gazebo reference="world">
   </gazebo>
   <gazebo>
      <plugin filename="libgazebo_ros2_control.so" name="gazebo_ros2_control">
         <parameters>$(arg simulation_controllers)</parameters>
      </plugin>
   </gazebo>

</robot>
